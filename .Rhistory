ggplot(dt.final.2, aes(x = dt, y = vol_90 * 1.645, group = 1)) + geom_line() + theme_bw(base_size = 15) +
xlab("Date") + ylab("VaR") + scale_y_continuous(labels = scales::percent)
ggplot(dt.final.2, aes(x = dt, y = VaR, group = 1)) + geom_line() + theme_bw(base_size = 15) +
xlab("Date") + ylab("VaR") + scale_y_continuous(labels = scales::dollar)
# Calculate rolling 90 day volatility
dt.final$nav_ret <- c(NA, tail(dt.final$nav, -1) / head(dt.final$nav, -1))
dt.final$vol_90 <- c(rep(NA, 90 - 1), rollapply(data = dt.final$nav_ret,width=90,FUN=sd))
dt.final$vol_90_dollar <- c(rep(NA, 90 - 1), rollapply(data = dt.final$nav,width=90,FUN=sd))
dt.final.2 <- dt.final[dt >= "2010-06-01"]
dt.final.2[,annualized_volatility := vol_90 * sqrt(250)]
dt.final.2[,VaR := vol_90 * NAV * 1.645]
# Calculate rolling 90 day volatility
dt.final$nav_ret <- c(NA, tail(dt.final$nav, -1) / head(dt.final$nav, -1))
dt.final$vol_90 <- c(rep(NA, 90 - 1), rollapply(data = dt.final$nav_ret,width=90,FUN=sd))
dt.final$vol_90_dollar <- c(rep(NA, 90 - 1), rollapply(data = dt.final$nav,width=90,FUN=sd))
dt.final.2 <- dt.final[dt >= "2010-06-01"]
dt.final.2[,annualized_volatility := vol_90 * sqrt(250)]
dt.final.2[,VaR := vol_90 * nav * 1.645]
dt.final.2
ggplot(dt.final.2, aes(x = dt, y = VaR, group = 1)) + geom_line() + theme_bw(base_size = 15) +
xlab("Date") + ylab("VaR") + scale_y_continuous(labels = scales::dollar)
write.csv(data.frame(dt.final.2), "nav_question_4.csv")
# Problem 5
dt.final.3 <- tail(dt.final.2, 251)
dt.final.3 <- dt.final.3[,list(dt, spy_price, msft_price, ge_price, spy_position, msft_position, ge_position,
nav1 = nav, nav1_ret = nav_ret)]
# Calculate asset proportion
msft_proportion <- dt.final.3[dt == "2018-11-09"]$msft_price * dt.final.3[dt == "2018-11-09"]$msft_position / dt.final.3[dt == "2018-11-09"]$nav1
spy_proportion <- dt.final.3[dt == "2018-11-09"]$spy_price * dt.final.3[dt == "2018-11-09"]$spy_position / dt.final.3[dt == "2018-11-09"]$nav1
ge_proportion <- dt.final.3[dt == "2018-11-09"]$ge_price * dt.final.3[dt == "2018-11-09"]$ge_position / dt.final.3[dt == "2018-11-09"]$nav1
dt.final.3[,msft_proportion := msft_proportion]
dt.final.3[,spy_proportion := spy_proportion]
dt.final.3[,ge_proportion := ge_proportion]
dt.final.3[,nav2 := (msft_proportion*msft_price + spy_proportion*spy_price + ge_proportion*ge_price)*dt.final.3[dt == "2018-11-09"]$nav1 + 100000]
dt.final.3$nav2_ret <- c(NA, tail(dt.final.3$nav2, -1) / head(dt.final.3$nav2, -1))
dt.final.3 <- tail(dt.final.3, 250)
dt.final.3[,nav1_ret := nav1_ret - 1]
dt.final.3[,nav2_ret := nav2_ret - 1]
dt.final.3
write.csv(data.frame(dt.final.3), "nav_question_5.csv")
# Problem 5
dt.final.3 <- tail(dt.final.2, 251)
dt.final.3 <- dt.final.3[,list(dt, spy_price, msft_price, ge_price, spy_position, msft_position, ge_position,
nav1 = nav, nav1_ret = nav_ret)]
# Calculate asset proportion
msft_proportion <- dt.final.3[dt == "2018-11-09"]$msft_price * dt.final.3[dt == "2018-11-09"]$msft_position / dt.final.3[dt == "2018-11-09"]$nav1
spy_proportion <- dt.final.3[dt == "2018-11-09"]$spy_price * dt.final.3[dt == "2018-11-09"]$spy_position / dt.final.3[dt == "2018-11-09"]$nav1
ge_proportion <- dt.final.3[dt == "2018-11-09"]$ge_price * dt.final.3[dt == "2018-11-09"]$ge_position / dt.final.3[dt == "2018-11-09"]$nav1
dt.final.3[,msft_proportion := msft_proportion]
dt.final.3[,spy_proportion := spy_proportion]
dt.final.3[,ge_proportion := ge_proportion]
dt.final.3
# Problem 5
dt.final.3 <- tail(dt.final.2, 251)
dt.final.3 <- dt.final.3[,list(dt, spy_price, msft_price, ge_price, spy_position, msft_position, ge_position,
nav1 = nav, nav1_ret = nav_ret)]
# Calculate asset proportion
msft_proportion <- dt.final.3[dt == "2018-11-09"]$msft_price * dt.final.3[dt == "2018-11-09"]$msft_position / dt.final.3[dt == "2018-11-09"]$nav1
spy_proportion <- dt.final.3[dt == "2018-11-09"]$spy_price * dt.final.3[dt == "2018-11-09"]$spy_position / dt.final.3[dt == "2018-11-09"]$nav1
ge_proportion <- dt.final.3[dt == "2018-11-09"]$ge_price * dt.final.3[dt == "2018-11-09"]$ge_position / dt.final.3[dt == "2018-11-09"]$nav1
dt.final.3[,msft_proportion := msft_proportion]
dt.final.3[,spy_proportion := spy_proportion]
dt.final.3[,ge_proportion := ge_proportion]
dt.final.3[,nav2 := (msft_proportion*msft_price + spy_proportion*spy_price + ge_proportion*ge_price)*dt.final.3[dt == "2018-11-09"]$nav1 + 100000]
dt.final.3$nav1_ret <- c(NA, tail(dt.final.3$nav1, -1) - head(dt.final.3$nav1, -1))
dt.final.3$nav2_ret <- c(NA, tail(dt.final.3$nav2, -1) - head(dt.final.3$nav2, -1))
dt.final.3 <- tail(dt.final.3, 250)
write.csv(data.frame(dt.final.3), "nav_question_5.csv")
ggplot(dt.final.3, aes(nav1_ret)) + stat_ecdf(color = "lightblue", size = 2) +
ggtitle("Cumulative Distribution of Returns Under Methodology A") +
theme_bw(base_size = 15) + xlab("Daily Returns") + ylab("Percent") +
scale_x_continuous(labels = scales::percent) + scale_y_continuous(labels = scales::percent)
ggplot(dt.final.3, aes(nav1_ret)) + stat_ecdf(color = "lightblue", size = 2) +
ggtitle("Cumulative Distribution of Returns Under Methodology B") +
theme_bw(base_size = 15) + xlab("Daily Returns") + ylab("Percent") +
scale_x_continuous(labels = scales::percent)
ggplot(dt.final.3, aes(nav1_ret)) + stat_ecdf(color = "lightblue", size = 2) +
ggtitle("Cumulative Distribution of Returns Under Methodology B") +
theme_bw(base_size = 15) + xlab("Daily Returns") + ylab("Percent") +
scale_x_continuous(labels = scales::dollar) + scale_y_continuous(labels = scales::percent)
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(choroplethr)
library(rvest)
library(ggthemes)
library(viridis)
# Scrape data from Wikipedia
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
population <- population[[1]]
dt.state_population <- data.table(population)
dt.state_population <- dt.state_population[,c(3,4)]
colnames(dt.state_population) <- c("state", "population")
dt.state_population <- dt.state_population[state %in% state.name]
dt.state_population[,population := as.numeric(population)]
dt.state_population[,population := gsub(",", "", population)]
dt.state_population
# Scrape data from Wikipedia
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
population <- population[[1]]
dt.state_population <- data.table(population)
dt.state_population <- dt.state_population[,c(3,4)]
colnames(dt.state_population) <- c("state", "population")
dt.state_population <- dt.state_population[state %in% state.name]
dt.state_population[,population := gsub(",", "", population)]
dt.state_population[,population := as.numeric(population)]
dt.state_population
write.csv(dt.state_population, "D:/Desktop/edav_final_project/health_care_data/state_population.csv")
parent_dir
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
setwd("..")
parent_dir <- getwd()
parent_dir
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
parent_dir
# Scrape data from Wikipedia
dt.state_population <- fread(paste0(parent_dir, "/health_care_data/state_population.csv"))
dt.state_population
runApp('shiny_app')
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
runApp('shiny_app')
runApp('shiny_app')
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
dt.data <- fread(paste0(parent_dir, "/health_care_data/master.csv"))
dt.data[,dt := as.Date(dt, format = "%m/%d/%Y")]
# Merge breach type name to data
dt.breach_type_name <- data.table(breach_type = c("DISC", "HACK", "CARD", "INSD", "PHYS", "PORT", "STAT", "UNKN"),
breach_type_name = c("Unintended Disclosure",
"Hacking",
"Payment Card Fraud",
"Insider Fraud",
"Physical Loss",
"Portable Device Loss",
"Stationary Device Loss",
"Unknown"))
dt.data <- merge(dt.data, dt.breach_type_name, by = c("breach_type"))
# Scrape data from Wikipedia
dt.state_population <- fread(paste0(parent_dir, "/health_care_data/state_population.csv"))
dt.state_population[,V1 := NULL]
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map[,category:="state"]
dt.map <- dt.map[order(state)]
dt.map[,code := state.abb]
dt.map[,hover := paste0("State: ", state)]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
update.packages("plotly")
install.packages("plotly")
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
dt.data <- fread(paste0(parent_dir, "/health_care_data/master.csv"))
dt.data[,dt := as.Date(dt, format = "%m/%d/%Y")]
# Merge breach type name to data
dt.breach_type_name <- data.table(breach_type = c("DISC", "HACK", "CARD", "INSD", "PHYS", "PORT", "STAT", "UNKN"),
breach_type_name = c("Unintended Disclosure",
"Hacking",
"Payment Card Fraud",
"Insider Fraud",
"Physical Loss",
"Portable Device Loss",
"Stationary Device Loss",
"Unknown"))
dt.data <- merge(dt.data, dt.breach_type_name, by = c("breach_type"))
# Scrape data from Wikipedia
dt.state_population <- fread(paste0(parent_dir, "/health_care_data/state_population.csv"))
dt.state_population[,V1 := NULL]
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map[,category:="state"]
dt.map <- dt.map[order(state)]
dt.map[,code := state.abb]
dt.map[,hover := paste0("State: ", state)]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
p
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
p
library(choroplethr)
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
p
runApp('shiny_app')
library(viridis)
install.packages("viridius")
install.packages("viridis")
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
library(choroplethr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
dt.data <- fread(paste0(parent_dir, "/health_care_data/master.csv"))
dt.data[,dt := as.Date(dt, format = "%m/%d/%Y")]
# Merge breach type name to data
dt.breach_type_name <- data.table(breach_type = c("DISC", "HACK", "CARD", "INSD", "PHYS", "PORT", "STAT", "UNKN"),
breach_type_name = c("Unintended Disclosure",
"Hacking",
"Payment Card Fraud",
"Insider Fraud",
"Physical Loss",
"Portable Device Loss",
"Stationary Device Loss",
"Unknown"))
dt.data <- merge(dt.data, dt.breach_type_name, by = c("breach_type"))
# Scrape data from Wikipedia
dt.state_population <- fread(paste0(parent_dir, "/health_care_data/state_population.csv"))
dt.state_population[,V1 := NULL]
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map <- dt.map[order(state)]
dt.map[,hover := paste0("State: ", state)]
dt.map[,code := state.abb]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
dt.map[,category:="state"]
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
p
install.packages("bindrcpp")
install.packages("bindrcpp")
install.packages("bindrcpp")
install.packages("bindrcpp")
install.packages("bindrcpp")
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
library(choroplethr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
dt.data <- fread(paste0(parent_dir, "/health_care_data/master.csv"))
dt.data[,dt := as.Date(dt, format = "%m/%d/%Y")]
# Merge breach type name to data
dt.breach_type_name <- data.table(breach_type = c("DISC", "HACK", "CARD", "INSD", "PHYS", "PORT", "STAT", "UNKN"),
breach_type_name = c("Unintended Disclosure",
"Hacking",
"Payment Card Fraud",
"Insider Fraud",
"Physical Loss",
"Portable Device Loss",
"Stationary Device Loss",
"Unknown"))
dt.data <- merge(dt.data, dt.breach_type_name, by = c("breach_type"))
# Scrape data from Wikipedia
dt.state_population <- fread(paste0(parent_dir, "/health_care_data/state_population.csv"))
dt.state_population[,V1 := NULL]
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
colnames(dt.map) <- c("state", "breach_instance")
dt.map[,category:="state"]
dt.map <- dt.map[state %in% state.name]
dt.map <- dt.map[order(state)]
dt.map[,code := state.abb]
dt.map[,hover := paste0("State: ", state)]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
) %>%
colorbar(title = "Breach Instance") %>%
layout(
title = 'Number of data breach instances from 2005 to 2018',
geo = g
)
p
runApp('shiny_app')
plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code,
color = ~breach_instance, colors = viridis_pal(option = "D")(3)
)
plot_geo(data.frame(dt.map), locationmode = 'USA-states')
plot_geo(data.frame(dt.map), locationmode = 'USA-states') %>%
add_trace(
z = ~breach_instance, text = ~hover, locations = ~code)
dt.data
dt.data[state == "California"]
unique(dt.data[state == "California"]$cat_name)
runApp('shiny_app')
runApp('shiny_app')
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
dt.map
colnames(dt.map) <- c("state", "breach_instance")
dt.map$state <- factor(dt.map$state,levels = dt.map[order(breach_instance, decreasing = TRUE)]$state)
dt.map
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map$state <- factor(dt.map$state,levels = dt.map[order(breach_instance, decreasing = TRUE)]$state)
ggplot(head(dt.map, 5), aes(x = state, y = breach_instance)) + geom_bar(stat = "identity") + theme_bw(base_size = 15) +
xlab("State") + ylab("Breach Instance")
dt.map
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map <- dt.states[,.N, by = state]
dt.map$state <- factor(dt.map$state,levels = dt.map[order(breach_instance, decreasing = TRUE)]$state)
dt.map <- dt.map[order(breach_instance, decreasing = TRUE)]
ggplot(head(dt.map, 5), aes(x = state, y = breach_instance)) + geom_bar(stat = "identity") + theme_bw(base_size = 15) +
xlab("State") + ylab("Breach Instance")
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map$state <- factor(dt.map$state,levels = dt.map[order(breach_instance, decreasing = TRUE)]$state)
dt.map <- dt.map[order(breach_instance, decreasing = TRUE)]
ggplot(head(dt.map, 5), aes(x = state, y = breach_instance)) + geom_bar(stat = "identity") + theme_bw(base_size = 15) +
xlab("State") + ylab("Breach Instance")
library(extracat)
visna(dt.data, sort = "r")
###################
###Missing Data ####
###################
install.packages("mi")
library(mi)
x<-missing_data.frame(dt.data)
dt.data
library(mi)
x<-missing_data.frame(dt.data)
image(x)
missing_data.frame
missing_data.frame(dt.data)
x
library(mi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dt.master <-fread(glue("{parent_dir}/health_care_data/master.csv"))
library(glue)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dt.master <-fread(glue("{parent_dir}/health_care_data/master.csv"))
library(mi)
x<-missing_data.frame(dt.master)
image(x)
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
dt.states <- dt.data[nchar(state) > 2][,list(dt, state, breach_id)]
dt.map <- dt.states[,.N, by = state]
dt.map <- dt.map[state %in% state.name]
colnames(dt.map) <- c("state", "breach_instance")
dt.map$state <- factor(dt.map$state,levels = dt.map[order(breach_instance, decreasing = TRUE)]$state)
dt.map <- dt.map[order(breach_instance, decreasing = TRUE)]
ggplot(head(dt.map, 5), aes(x = state, y = breach_instance)) + geom_bar(stat = "identity") +
theme_bw(base_size = 15) +
xlab("State") + ylab("Breach Instance")
runApp('shiny_app')
dt.data
x<-missing_data.frame(dt.data)
image(x)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dt.master <-fread(glue("{parent_dir}/health_care_data/master.csv"))
x<-missing_data.frame(dt.master)
dt.data_missing <- dt.data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
parent_dir <- getwd()
dt.data <- fread(paste0(parent_dir, "/health_care_data/master.csv"))
runApp('shiny_app')
x<-missing_data.frame(dt.data_missing)
image(x)
parent_dir
parent_dir
normalizePath(paste0(parent_dir, "/analysis_graph/missing_data.jpeg"))
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
readImage(paste0(parent_dir, "/analysis_graph/missing_data.jpeg"))
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
readJPEG(paste0(parent_dir, "/analysis_graph/missing_data.jpeg"))
shiny::runApp('shiny_app')
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
library(extracat)
library(mi)
library(jpeg)
library(shiny)
library(data.table)
library(ggplot2)
library(lubridate)
library(plotly)
library(ggthemes)
library(viridis)
library(extracat)
library(jpeg)
